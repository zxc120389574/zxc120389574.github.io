{"pages":[{"title":"404 Not Found：该页无法显示","text":"","link":"/404.html"},{"title":"我的书单","text":"","link":"/book/index.html"},{"title":"about","text":"我的简历，喝喝茶","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"course","text":"","link":"/course/index.html"},{"title":"我的文章","text":"","link":"/archive/index.html"},{"title":"友情链接","text":"","link":"/links/index.html"},{"title":"msg_board","text":"","link":"/msg_board/index.html"},{"title":"music","text":"","link":"/music/index.html"},{"title":"link","text":"","link":"/link/index.html"},{"title":"plan","text":"","link":"/plan/index.html"},{"title":"Repositories","text":"","link":"/repository/index.html"},{"title":"statement","text":"","link":"/statement/index.html"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"test","text":"","link":"/test/index.html"}],"posts":[{"title":"【leetcode】 test","text":"题目：The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P A H N A P L S I I G Y I R And then read line by line: “PAHNAPLSIIGYIR” Write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numRows); 思路：实际上蕴含着一些规律。把所有answer矩阵中元素的(r,c)坐标（r是行号，c是列号）与对应原字符串s中的位置index（index从0开始）都列出来，你就会发现一个规律：index=r+2*c。是不是很神奇！哈哈哈！ 具体分析如下：==注：n就是题目中的numRows。==例如，n为4，字符串s长度为15（具体内容不重要）。其(r,c)与index映射关系如下： 矩阵中的位置(r,c) 原数组中的位置index (0,0) 0 (0,3) 6 (0,6) 12 (1,0) 1 (1,2) 5 (1,3) 7 (1,5) 11 (1,6) 13 (2,0) 2 (2,1) 4 (2,3) 8 (2,4) 10 (2,6) 14 (3,0) 3 (3,3) 9 我们可以发现一个规律：index=r+2*c。这样我们就可以知道answer矩阵中每个位置应该输出的元素是什么。 ========================================================================= 接下来就要分析矩阵元素的分布规律了。通过画个图就能发现其中的规律。例如，n为7，字符串s长度为31时，分析如下：规律已经很明显了 。按照图上规律，按行遍历矩阵中所有元素的坐标（不存在就不要遍历），然后将(r,c)转化成index，然后输出元素即可。 代码实现如下，时间复杂度应该为$\\ O(n)$： 12345678910111213141516171819202122232425262728293031323334353637383940class Solution {public: string convert(string s, int numRows) { if (s.length() == 0 || numRows &lt;= 1){ return s; } int r = 0, c = 0; int n = numRows; string ans; while (ans.length() &lt; s.length() &amp;&amp; r &lt; n){ c = 0; int swh = 1; int step1 = n - 1 - r; int step2 = n - 1 - step1; if (step1 == 0 || step2 == 0){ while (r+2*c &lt; s.length()){ ans.append(1,s[r+2*c]); c += n-1; } }else { while (r+2*c &lt; s.length()){ ans.append(1,s[r+2*c]); if (swh){ c += step1; swh = 1 - swh; }else{ c += step2; swh = 1 - swh; } } } ++r; } return ans; }}; discuss，比我的思路简介，似乎我想复杂了。直接看代码注释： 1234567891011121314151617181920212223class Solution {public: string convert(string s, int numRows) { vector&lt;string&gt; vs(numRows, \"\"); // Z字型矩阵 int i = 0; while (i &lt; s.length()){ for (int j = 0; j &lt; numRows &amp;&amp; i &lt; s.length(); j++){ //从上到下遍历（包含首行和尾行） vs[j].push_back(s[i++]); } for (int j = numRows - 2; j &gt;= 1 &amp;&amp; i &lt; s.length(); --j){ // 从下到上遍历（不包含首行和尾行） vs[j].push_back(s[i++]); } } string zigzag; for (string &amp;v : vs){ // 最后将vs中每个字符串拼接起来即可 zigzag += v; } return zigzag; }};","link":"/2021/01/12/%E3%80%90leetcode%E3%80%91-test/"},{"title":"什么是深度学习（转载的，测试用的，马上删）","text":"1 绪论1.1 背景现今，随着计算机计算能力的提高，在人工智能（Artificial Intelligent，AI）领域中，深度学习的人工神经网络的算法慢慢崭露头角，开始在不同的领域识别取得不错的准确率。 而且，在我们日常生活中广泛应用。如帮助医生进行武汉肺炎医学诊断影像，移动人脸支付，停车场车牌识别和犯罪嫌疑犯的人脸识别等等。 如今，各类技术公司将深度学习成熟运用于我们生活方方面面当中，科大讯飞公司的语言识别技术，旷视face++公司的人脸识别技术，Google公司深度学习框架的开源和业界内大量人工智能的应用等等。 现今，大量企业对于深度学习领域的人脸识别应用于智能家居安防，春运期间人脸识别检验旅客的信息，人脸识别购物反欺诈等等的应用，逐渐获得社会的关注和大量的应用。 深度学习的有着悠久的历史，随着可用准确的训练数据量的不断增加，深度学习的方法变得高可靠。 而且，随着科学技术的发展，针对深度学习的计算机硬件基础设施，如：图像处理单元（Graphics Processing Unit，GPU）、现场可编程门阵列（FPGA）、谷歌公司的张量处理器（Tensor Processing Unit，TPU）等改善，深度学习的模型的深度和规模也会随之得到拓展。 总结，深度学习随着时间的推移，已经可以解决日益复杂的应用，模型的精度也得到提高。 在1989年Yann Lecun教授使用神经网络实现数字的识别[2]； 1998年Yann Lecun发布了Lenet的卷积神经网络（CNNs）用于手写数字识别的文章[3]； 2009年，imageNet大型分类数据集发布； 2012年，AlexNet提出GPU训练的深度学习卷积神经网络，并获得了imageNet冠军[4]； 2014年，GoogLeNet使用Inception网络结构，在ImageNet夺冠[5]； 2015年，ResNet在ILSVRC冠军[6]； 到了2018年，MobileNetV2[7]的提出。 对此，卷积神经网络对于图像识别分类有着更高的精度。 1.2 国内外研究现状近些年来，随着计算机视觉计算的不断迭代更新，计算机的硬件如CPU，GPU和FPGA等计算能力的提升，图像识别的模型训练速度得到提升，由此，识别的准确率也有了很大的提升。 在国外，手机移动端使用摄像头皮肤癌症检测对于采集的图像进行分类，根据模型预测对应的皮肤疾病，其识别的准确度才能保证协助医生更好的诊断病情，提高疾病的查出率。 目前，在国内外的人脸识别的应用使用比较广泛的方面，主要有图像检索，街道摄像头嫌疑犯的人脸查找、出入境人脸身份的验证和人脸支付等。 随着GPU高效的运用在神经网络的训练的过程当中，并行化处理每个神经元的参数，对于高纬度的张量计算，减少了训练模型的时间，加快了每次调参数的时间，最终提高了模型训练的准确度。 虽然，基础理论结合高速率的计算机计算能力，不断提升模型训练的精度和速率，但是在实际应用当中，随着应用场景的变化，人脸识别的精确度也有挑战性的因素存在： （1）模型训练集的选取，使用多角度的人脸集、不同表情的人脸集，还是不同场景的人脸集等，都会对人脸识别的模型造成训练的误差； （2）实际的人脸识别的过程中，识别环境的光线要求比较高，对于在不同的环境光线对人脸识别系统的识别率要求比较高。 2 深度学习的领域在计算机从层次化的概念体系当中学习并理解世界，而层次化的概念让计算机构建比较简单的概念来学习，达到学习复杂的概念，对此建立在彼此之间的图，可以不断学习等到层次更多的图，由此得到这种方法为深度学习（Deep Learning，DL）[1]。 人工智能属于一级专业的领域，其涵括机器学习，而神经网络因其迭代计算和网络结构深度被包括在深度学习的领域。 实际的工业级应用中，google公司的DeepMind团队研发的Alpa Go系统因其深度学习系统在围棋领域战胜人类专业的选手李世石而名声大振。 深度学习的神经网络结构，有DNN深度神经网络，CNNs卷积神经网络，RNN循环卷积网络等，因其算法功能和实际应用的场景对应产生不同的神经网络。 图 2-1 深度学习的维恩图 由图2-1维恩图可知，展现了深度学习不仅是一种表示学习，还是一种机器学习，可以用于大多数的人工智能的方法，其中维恩图的每个部分都是AI技术的子集。 2.1 机器学习机器学习是一个计算机程序在某类任务T和衡量P从经验E中自我完善，如果它的表现在任务T通过P来衡量并通过经验E提高，可以说计算机程序从E中学习。 机器学习又可以分为监督学习、无监督学习、半监督学习、增强学习等不同的领域。 对应监督学习是需要用给定有标签的数据集进行训练，训练出来的模型，使用测试数据集进行测试，得到的误差进行迭代测试，最终将模型调试成得到的预测数与实际的数据误差更小的过程[7]。 目的就是根据实际应用场景选择合适的学习方法，然后使用对应的训练和测试数据集进行模型的构造。 图2-2监督学习过程 由图2-2可知，监督学习过程是输入有标签的数据集，使用对应的监督学习的算法进行机器学习模型的训练，再使用数据输入进训练好的模型，模型对数据集进行预测，获得预测的数据整个流程。 因此，这个思路在系统的构建可以灵活的应用[8]。 2.2 深度学习对于传统学习算法在对象识别方面的泛化预测能力不足，深度学习算法由此得到一些发展。 深度学习因其神经网络结构的隐藏处理层的数量增加，对于图片的分类的精度的提高，而目前使用GPU并行化处理提高神经网络的训练速度，因此可以被应用于图像分类。 深度学习因此应用于语言识别，预测疾病，模式识别等等的方面。 3 总结最后通过思维导图，总结一下什么是深度学习。 深度学习属于人工智能领域，是一种机器学习的方法。 通过运用不同的神经网络，可以运用于我们日常生活当中，如：语音识别，人脸识别，模式识别等等。 代码示例： 12345678910111213141516171819202122class Solution {public: static int cmp(int &amp;a, int &amp;b){ string t1 = to_string(a) + to_string(b); string t2 = to_string(b) + to_string(a); return t1 &gt; t2; } string largestNumber(vector&lt;int&gt;&amp; nums) { if (nums.size() == 0) return \"\"; sort(nums.begin(), nums.end(), Solution::cmp); string ans = \"\"; for (int i = 0; i &lt; nums.size(); ++i){ ans += to_string(nums[i]); } return ans[0] == '0'? \"0\" : ans; }}; 参考文献 [1] Ian Goodfellow, Y Bengio,Aaron Courville. Deep learning[M]. Book in preparation for MIT Press,2016. [2] Y. LeCun. Generalization and Network Design Strategies[R].Technical Report CRG-TR-89-4,1989. [3] Y LeCun,L Bottou, Y Bengio, Pateick H. Gradient-Based Learning Applied to Document Recognition[J].Proc of the [3] IEEE,1998:7-8. [4] Alex Krizhevsky, I Sutskever, G E. Hinton. Imagenet classification with deep convolutional neural networks[J].In [4] NIPS,pp,2012:4-6. [5] Christian Szegedy,Wei Liu,Yangqing Jia,Pierre Sermanet,Scott Reed,Dragomir Anguelov,Dumitru Erhan,Vincent Vanhoucke,Andrew Rabinovich. Going deeper with convolutions,2014. [6]Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. Deep Residual Learning for Image Recognition,2015. [7]Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, Liang-Chieh Chen. MobileNetV2: Inverted Residuals and Linear Bottlenecks,2019.","link":"/2021/01/12/test-article/"},{"title":"搜索引擎高级搜索","text":"前言：通过多次在谷歌和百度上使用高级搜索，发现，百度与谷歌在收录词条和查询精度上均有较大差距，故推荐在谷歌上使用高级搜索以提高效率。 常用的高级搜索指令：site，filetype，逻辑与或、逻辑非、双引号、通配符*、intitle、allintitle、inurl、allinurl、intext、allintext 更详细：更详细的高级搜索看下面这篇博文，包括搜索引擎高级搜索和本地搜索，整理得非常直观非常好：https://cloud.tencent.com/developer/article/1464793","link":"/2021/01/12/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"}],"tags":[{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"deep_learning","slug":"deep-learning","link":"/tags/deep-learning/"},{"name":"machine_learning","slug":"machine-learning","link":"/tags/machine-learning/"}],"categories":[]}