{"pages":[{"title":"404 Not Found：该页无法显示","text":"","link":"/404.html"},{"title":"archives","text":"","link":"/archives/index.html"},{"title":"关于我","text":"联系方式 QQ: 120389574（常用） 邮箱：120389574@qq.com（常用） 有问题可交流。欢迎交流。 网站日志： 2021-1-23： 今天算是把完全属于个人的博客搭建起来了，主要的写作功能基本完善，可以正式写博客了。网站初期比较简单，也存在不少的BUG，后期将随着博客的使用不断地完善。这对于自己来说是一次全新的体验。","link":"/about/index.html"},{"title":"我的书单","text":"","link":"/book/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"link","text":"","link":"/link/index.html"},{"title":"course","text":"","link":"/course/index.html"},{"title":"友情链接","text":"","link":"/links/index.html"},{"title":"msg_board","text":"","link":"/msg_board/index.html"},{"title":"music","text":"","link":"/music/index.html"},{"title":"plan","text":"","link":"/plan/index.html"},{"title":"statement","text":"","link":"/statement/index.html"},{"title":"Repositories","text":"","link":"/repository/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"test","text":"","link":"/test/index.html"}],"posts":[{"title":"MySQL指令总结","text":"通过SQL的 GRANT 命令，指定数据库TUTORIALS添加用户 zara ，密码为 zara123 。 1grant select,insert,update,delete,create,drop on TUTORIALS.* to 'zara'@'localhost' identified by '123'; # 如果没有identified by '123'，则会把用户密码给清掉 显示数据表的属性： 1show columns from runoob_tbl; 显示数据表详细的索引信息： 1show index from runoob_tbl; 显示数据库所有数据表的信息： 123show table status from RUNOOB; # 显示数据库 RUNOOB 中所有表的信息show table status from RUNOOB like 'runoob%'; # 表名以runoob开头的表的信息show table status from RUNOOB like 'runoob%'\\G; # 加上 \\G，查询结果按列打印 先看数据表属性： 1desc RUNOOB; 使用mysql二进制方式连接： 1mysql -u root -p -h ip_addr 创建数据库： 1create database 数据库名; 使用mysqladmin创建数据库： 1mysqladmin -u root -p create RUNOOB 删除数据库： 1drop database &lt;数据库名&gt;; 选择数据库： 1use RUNOOB; 创建数据库表： 1234567create table if not exists `runoob_tbl`( `runoob_id` INT UNSIGNED AUTO_INCREMENT, `runoob_title` VARCHAR(100) NOT NULL, `runoob_author` VARCHAR(40) NOT NULL, `submission_date` DATE, PRIMARY KEY ( `runoob_id` ))ENGINE=InnoDB DEFAULT CHARSET=utf8; 删除数据表： 1drop table table_name; 插入数据： 1insert into table_name(field1, field2,..fieldN) values(value1,value2,...valueN); 更新数据： 1update table_name set field1=new_val1, field2=new_val2; 删除语句： 1delete from table_name where field1=target_val1 正则表达式： 1mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP '^st'; 事务处理： 123begin; # 开始事务rollback; # 回滚，只有在事务中才可以回滚commit; # 提交事务 删除、添加和修改字段： 1234alter table test drop i; # 删除字段alter table test add i int; # 添加字段alter table test add i int first; # 添加字段到最前面alter table test add i int after c; # 添加字段到c后面 修改字段类型及名称（modify只修改字段类型；change既修改字段名，也修改字段类型）： 123alter table test modify c char(10);alter table test change i j bigint;alter table test change j j int; 修改字段的是否允许NULL和默认值： 1alter table test modify j bigint not null default 100; 修改i字段默认值： 1alter table test alter i set default 1000; 删除i字段默认值： 1alter table test alter i drop default; 修改数据表属性： 1alter table test engine = MYISAM; 修改表名： 1alter table test rename to test2; 创建索引： 1create index indexName ON mytable(username(length)); 修改表结构（添加索引）： 1alter table tableName add index indexName(columnName) 创建数据表的时候直接指定： 12345create table mytable( id int not null, username varchar(16) not null, index [indexName] (username(length))); 删除索引： 1drop index [indexName] on mytable; 创建唯一索引（它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一）： 1create unique index indexName on mytable(username(length)) 修改数据表结构添加唯一索引： 1alter table mytable add unique [indexName](username(length)) 创建数据表时直接指定唯一索引： 12345create table mytable(id int not null,username varchar(16) not null,unique [indexName](username(length))); 使用alter命令添加和删除索引： 1234alter table tbl_name add primary key(column_list); # 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。alter table tbl_name add unique index_name(column_list); # 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。alter table tbl_name add index index_name(column_list); # 添加普通索引，索引值可出现多次。alter table tbl_name add fulltext index_name(column_list); # 该语句指定了索引为 FULLTEXT ，用于全文索引。 实例： 12alter table test add index(c); # 添加普通索引alter table test drop index c; # 删除索引 使用alter命令为i添加和删除主键： 123alter table test modify i int not null;alter table test add primary key(i);alter table test drop primary key; 显示索引： 1show index from table_name; 临时表：MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。show tables是看不到临时表的，从第一次insert数据之后才会创建，连接关闭后会自动释放。 创建临时表： 123456create temporary table SalesSummary( product_name varchar(50) not null, total_sales decimal(12,2) not null default 0.00, avg_unit_price decimal(7,2) not null default 0.00, total_units_sold int unsigned not null default 0); 删除临时表： 1drop table SalesSumary; 复制表： 1、获取数据表的完整结构： 123456789show create table test;#返回结果：CREATE TABLE `test` ( `id` int(5) DEFAULT NULL, `i2` bigint(20) NOT NULL DEFAULT '100', `svrzhang` int(11) DEFAULT '43232', KEY `i2` (`i2`), KEY `i2_2` (`i2`)) ENGINE=MyISAM DEFAULT CHARSET=latin1clone_test 2、修改sql语句中的数据表名： 1234567CREATE TABLE `clone_mtest` ( `id` int(5) DEFAULT NULL, `i2` bigint(20) NOT NULL DEFAULT '100', `svrzhang` int(11) DEFAULT '43232', KEY `i2` (`i2`), KEY `i2_2` (`i2`)) ENGINE=MyISAM DEFAULT CHARSET=latin1clone_test 3、将数据旧数据拷贝到新表中去： 1insert into clone_test select * from test; 元数据：数据库服务器自身的一些属性。一般放在CHARACTER_SETS中。 序列使用（就是AUTO_INCREMENT）： 创建表时设置主键和自增序列（自增序列必须是主键）： 1234567create table test( id int unsigned not null auto_increment, primary key(id), name varchar(30) not null, data data not null, origin varchar(30) not null); 重置序列。如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。 12alter table test drop id; # 删掉idalter table test add id int unsigned not null auto_increment first, add primary key(id); # 重新将id添加回来，会自动生成序列 修改序列的开始值： 1234567create table test( id int unsigned not null auto_increment, primary key(id), name varchar(30) not null, date date not null, origin varchar(30) not null)engine=innodb auto_increment=100 charset=utf8; 1alter table test auto_increment = 100; 防止表中出现重复数据：你可以在 MySQL 数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。 统计重复数据： 1select count(*) as c1 from test group by i2,svrzhang having c1 &gt; 1; 过滤重复数据： 123select distinct last_name,from_name from test;或select last_name,first_name from test group by (id); 删除重复数据： 1create table tmp select * from test group by i2; 修改数据表中单个字段的编码格式： 1ALTER TABLE `tablename` CHANGE `字段名1` `字段名2` VARCHAR(36) CHARACTER SET utf8 NOT NULL; 修改数据表中所有字段的编码格式： 1alter table `tablename` convert to character set utf8; 经典SQL练习笔记： group by后的属性值，可以再通过下面方式横向显示出来 123sum(case when Cid=\"01\" then score else null end)c1,sum(case when Cid=\"02\" then score else null end)c2,sum(case when Cid=\"03\" then score else null end)c3 例如： 12345select Sid, score, sum(case when Cid=01 then Cid else null end)c1, sum(case when Cid=02 then Cid else null end)c2, sum(case when Cid=03 then Cid else null end)c3 from SC group by Sid; 经典题目： 查询各科成绩最高分、最低分和平均分，以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率(及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90）。 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 12345678select b.Cname, a.* from(select Cid, max(score)max, min(score)min, avg(score)avg, count(*)选修人数, sum(case when score &gt;= 60 then 1 else 0 end)及格率, sum(case when score &gt;= 70 and score &lt;= 80 then 1 else 0 end)中等率, sum(case when score &gt;= 80 and score &lt;= 90 then 1 else 0 end)优良率, sum(case when score &gt;= 90 then 1 else 0 end)优秀率from SC group by Cid order by 选修人数 desc) a join Course b on a.Cid = b.Cid order by a.Cid asc; 添加一列rank字段，显示排名： from后面是变量初始化。 1select a.*, @curRank:=@curRank+1 as rank from (select @curRank := 0) p,(select Sid,avg(score)avg from SC group by Sid order by avg desc) a; 按平均成绩进行排序，显示总排名和各科排名，Score 重复时保留名次空缺： 题目答案，但是我没有rank()函数（对应成绩相同的情况，如何处理完全取决于rank()函数是怎么实现的）。 1234567select s.*, rank_01, rank_02, rank_03, rank_totalfrom student s left join (select sid, rank() over(partition by cid order by score desc) as rank_01 from sc where cid=01) A on s.sid=A.sid left join (select sid, rank() over(partition by cid order by score desc) as rank_02 from sc where cid=02) B on s.sid=B.sid left join (select sid, rank() over(partition by cid order by score desc) as rank_03 from sc where cid=03) C on s.sid=C.sid left join (select sid, rank() over(order by avg(score) desc) as rank_total from sc group by sid) D on s.sid=D.sidorder by rank_total asc 我自己的答案： 1234567select s.*, rank1, rank2, rank3, rankallfrom Student s left join (select Sid,@curRank1:=@curRank1+1 as rank1 from SC, (select @curRank1 := 0) p where Cid = \"01\" order by score desc) A on A.Sid = s.Sid left join (select Sid,@curRank2:=@curRank2+1 as rank2 from SC, (select @curRank2 := 0) p where Cid = \"02\" order by score desc) B on B.Sid = s.Sid left join (select Sid,@curRank3:=@curRank3+1 as rank3 from SC, (select @curRank3 := 0) p where Cid = \"03\" order by score desc) C on C.Sid = s.Sid left join (select Sid,@curRank4:=@curRank4+1 as rankall from (select Sid, avg(score)avg from SC group by Sid order by avg desc) a, (select @curRank4 := 0) p) D on D.Sid = s.Sidorder by rankall asc; 实际上是解决了这几个子问题：对课程01进行排名；对课程02进行排名；对课程03进行排名；根据每个同学的平均成绩进行排名。最后将这些子问题用left join结合在一起直接出答案。 查询各科成绩前三名的记录：直接求出各科排名，然后取前三名即可。 查询和“01”学号同学学习的课程完全相同的其他同学的id： group_concat()函数把各个Cid合并成一个字符串并统一按升序，然后比较这个合并后的字符串即可。实质就是将每个学生的信息进行聚合，然后用聚合后的Cid字符串进行比较。最后把自己刨除掉即可。 1select a.Sid, group_concat(cid order by cid) as Cids from SC a where a.Sid &lt;&gt; \"01\" group by a.Sid having Cids = (select group_concat(cid order by cid) as Cids from SC where Sid = \"01\" group by sid) 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺： 在条件a.cid = b.cid and a.score &lt; b.score下，SC left join SC的结果（所有属性排列顺序：a.sid, a.cid, a.score, b.sid, b.cid, b.score）是：从笛卡尔积中，将所有同一cid下a.score值小于b.score的情况筛选出来，最终情况就是，如果对a.sid和a.cid进行group，那么每一个group中的a.score均小于b.score，每一个组中元素的数量就是在同一cid下比a.score分数高的同学数量，同一cid下a.score的排名就是count(b.score)+1，重复时保留名次空缺，正好符合题目。 注意：一定要用left join，否则第一名由于group元素为空而不存在。 123456select a.sid, a.cid, count(b.score)+1 rankfrom SC as aleft join SC as bon a.cid = b.cid and a.score &lt; b.scoregroup by a.sid, a.cidorder by a.cid asc, rank asc 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺： 注意：这个题目是“总分重复时不保留名次空缺”，所以只能使用变量法，而不能使用上题中技巧。 1select Sid, sum, @rank_i:=@rank_i+1 rank from (select @rank_i:=0) a,(select Sid, sum(score)sum from SC group by Sid order by sum desc) b 练习：test.sql","link":"/2021/01/24/MySQL%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/"},{"title":"C语言位域（结构体中冒号的用法）","text":"看博文https://blog.csdn.net/yihongxiaoxiang/article/details/50327587，最后面的那个例子和图很直观。","link":"/2021/01/24/C%E8%AF%AD%E8%A8%80%E4%BD%8D%E5%9F%9F%EF%BC%88%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E5%86%92%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%89/"},{"title":"html布局总结","text":"#水平居中（父div和子div配合）： 123456789101112&lt;style type=\"text/css\"&gt;.parent{text-align: center;}.child{display: inline-block;}&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; #水平居中（只需要设置子div，但需要指定width）： 123456789101112&lt;style type=\"text/css\"&gt;.child{width:200px;margin:0 auto;}&lt;/style&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt; #水平居中（只需要设置子div，不需要指定width）： 1234567891011&lt;style type=\"text/css\"&gt;.child{display:table;margin:0 auto;}&lt;/style&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt; #水平居中（只需设置子div，绝对定位）： 1234567891011&lt;style type=\"text/css\"&gt;.child{position:absolute;left:50%;transform:translate(-50%);}&lt;/style&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt; #水平居中（flex实现）： 1234567891011121314&lt;style type=\"text/css\"&gt;/*或者直接用这种方法，不用设置child：.parent{display:flex;justify-content:center;}*/.parent{display:flex;}.child{margin:0 auto;}&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; #垂直居中（只设置父div）： 123456789101112&lt;style type=\"text/css\"&gt;.parent{display:table-cell;vertical-align:middle;height:320px;}/*.parent{display:table-cell;vertical-align:middle;height:20px;}，但这个方法只能使1个元素垂直居中*/&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; #垂直居中（flex，只设置父div）： 12345678910&lt;style type=\"text/css\"&gt;.parent{display:flex;align-items:center;height:400px;text-align:center;}&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; #水平和垂直居中（设置父div和子div）： 1234567891011121314&lt;style type=\"text/css\"&gt;.parent{display:flex;align-items:center;height:400px;text-align:center;}.child{ display:table; margin:0 auto;}&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 另一方法： 1234567891011&lt;style type=\"text/css\"&gt;.parent{display:table-cell;vertical-align:middle;text-align:center;height:300px;width:300px;}.child{display:inline-block;}&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; #水平和垂直居中（flex，只需设置父div）： 12345678910&lt;style type=\"text/css\"&gt;.parent{display:flex;justify-content:center;align-items:center;height:400px;}&lt;/style&gt;&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;p&gt;asdfasdf哈哈哈&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; #左列定宽，右列自适应： 1234567891011121314&lt;style type=\"text/css\"&gt;.left{float:left;width:100px;position:fixed;}.right{margin-left:100px;height:2000px;}&lt;/style&gt;&lt;div class=\"left\"&gt;&lt;p&gt;左列&lt;/p&gt;&lt;/div&gt;&lt;div class=\"right\"&gt;&lt;p&gt;右列&lt;/p&gt;&lt;/div&gt; 上述布局来自这个网站，更多布局看这个网站：https://zhuanlan.zhihu.com/p/33013417 #左中右布局看这个网站：https://www.cnblogs.com/starxp/articles/4159903.html #div居正中看这个：https://www.cnblogs.com/echolun/p/11353627.html","link":"/2021/01/23/html%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"},{"title":"linux指令：打印某一列","text":"1ll *.c | awk -F' ' '{print $9}' img","link":"/2021/01/24/linux%E6%8C%87%E4%BB%A4%EF%BC%9A%E6%89%93%E5%8D%B0%E6%9F%90%E4%B8%80%E5%88%97/"},{"title":"linux指令：统计行数","text":"1ll *.c | wc -l img","link":"/2021/01/24/linux%E6%8C%87%E4%BB%A4%EF%BC%9A%E7%BB%9F%E8%AE%A1%E8%A1%8C%E6%95%B0/"},{"title":"python读取pdf内容","text":"pdfminer： pdfminer原理剖析：https://www.cnblogs.com/wj-1314/p/9429816.html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061from pdfminer.pdfparser import PDFParserfrom pdfminer.pdfdocument import PDFDocumentfrom pdfminer.pdfpage import PDFPagefrom pdfminer.pdfpage import PDFTextExtractionNotAllowedfrom pdfminer.pdfinterp import PDFResourceManagerfrom pdfminer.pdfinterp import PDFPageInterpreterfrom pdfminer.pdfdevice import PDFDevicefrom pdfminer.layout import LTTextBoxHorizontal,LAParamsfrom pdfminer.converter import PDFPageAggregatorimport osdef getPdfFileList(dir): files = os.listdir(dir) ret = [] for f in files: if os.path.isfile(f) and os.path.splitext(f)[-1] == '.pdf': ret.append(f) return retdef parsePdf(pdf): fp = open(pdf, 'rb') # 创建一个PDF文档解析器对象 parser = PDFParser(fp) # 创建一个PDF文档对象存储文档结构 # 提供密码初始化，没有就不用传该参数 document = PDFDocument(parser) # 检查文件是否允许文本提取 if not document.is_extractable: raise PDFTextExtractionNotAllowed # 创建一个PDF资源管理器对象来存储共享资源 rsrcmgr = PDFResourceManager() laparams = LAParams() device = PDFPageAggregator(rsrcmgr, laparams=laparams) # 创建一个PDF解析器对象 interpreter = PDFPageInterpreter(rsrcmgr, device) # 处理文档当中的每个页面 for page in PDFPage.create_pages(document): interpreter.process_page(page) layout = device.get_result() # 这里layout是一个LTPage对象 里面存放着 这个page解析出的各种对象 # 一般包括LTTextBox, LTFigure, LTImage, LTTextBoxHorizontal 等等 # 想要获取文本就获得对象的text属性， for x in layout: print(\"------------------------------------------------------------------------\") if (isinstance(x, LTTextBoxHorizontal)): txt = x.get_text() print(txt) break breakpdfs = getPdfFileList(\".\")for pdf in pdfs: parsePdf(pdf) PyPDF2获取pdf文件属性： 12345678910111213141516171819202122from PyPDF2 import PdfFileWriter, PdfFileReaderimport osdef getPdfFileList(dir): files = os.listdir(dir) ret = [] for f in files: if os.path.isfile(f) and os.path.splitext(f)[-1] == '.pdf': ret.append(f) return retdef parsePdf(pdf): fp = open(pdf, 'rb') pdf_reader = PdfFileReader(fp) # 打开并建立一个PDF文件对象 paper_title = pdf_reader.getDocumentInfo().title # 获取PDF标题 paper_title = str(paper_title) # 标题字符化 print (paper_title)pdfs = getPdfFileList(\".\")for pdf in pdfs: parsePdf(pdf)","link":"/2021/01/24/python%E8%AF%BB%E5%8F%96pdf%E5%86%85%E5%AE%B9/"},{"title":"【hexo】使用typora写文章时，解决Markdown图片存放问题","text":"1、下载typora。 2、配置typora。如下图： img 3、在hexo根配置文件（不是主题配置文件）中，设置post_asset_folder为 true。 4、安装插件 asset-image，它会自动修正md文件中图片的相对路径，以便能够在url中正确路由。 1npm install https://github.com/CodeFalling/hexo-asset-image","link":"/2021/01/22/%E3%80%90hexo%E3%80%91%E4%BD%BF%E7%94%A8typora%E5%86%99%E6%96%87%E7%AB%A0%E6%97%B6%EF%BC%8C%E8%A7%A3%E5%86%B3Markdown%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE%E9%97%AE%E9%A2%98/"},{"title":"【hexo】新建立的page与主页完全一样，如何解决？","text":"原因： 这是因为没有找到对应页面。假设新建页面为about，需要在source/about/index.md中写入“layout: abouts”，这个layout所指向的正是真正的abouts.ejs网页（必须指向存在的.ejs页面）。如果你在网页中直接访问http://localhost:4000/about/，这个about指的是访问source/about文件夹，然后再会根据此文件夹下的index.md文件访问abouts.ejs页面。 解决方法： 将/scaffolds/page.md中的添加上layout即可。如下： 123456---title: {{ title }}date: {{ date }}layout: {{ title }}---","link":"/2021/01/23/%E3%80%90hexo%E3%80%91%E6%96%B0%E5%BB%BA%E7%AB%8B%E7%9A%84page%E4%B8%8E%E4%B8%BB%E9%A1%B5%E5%AE%8C%E5%85%A8%E4%B8%80%E6%A0%B7%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F/"},{"title":"【hexo】添加valine留言板","text":"看教程就好：https://valine.js.org/quickstart.html 注意：jQuery和valine的js包都要放在网站最前面的head的中，否则无效。","link":"/2021/01/23/%E3%80%90hexo%E3%80%91%E6%B7%BB%E5%8A%A0valine%E7%95%99%E8%A8%80%E6%9D%BF/"},{"title":"【hexo】添加search搜索功能","text":"看这个教程即可：https://github.com/wzpan/hexo-generator-search","link":"/2021/01/23/%E3%80%90hexo%E3%80%91%E6%B7%BB%E5%8A%A0search%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"},{"title":"【node.js】简单的爬虫","text":"这是网上别人的一个代码，学习了一下。 12345678910111213141516171819202122var axios = require(\"axios\")var cheerio = require(\"cheerio\")axios.get(\"https://github.com/weiyinfu?tab=repositories\").then(resp =&gt; { var $ = cheerio.load(resp.data) var lis = $(\"#user-repositories-list li\") var repos = [] for (var i = 0; i &lt; lis.length; i++) { var li = lis.eq(i) var repo = { repoName: li.find(\"h3\").text().trim(), repoUrl: li.find(\"h3 a\").attr(\"href\").trim(), repoDesc: li.find(\"p\").text().trim(), language: li.find(\"[itemprop=programmingLanguage]\").text().trim(), star: li.find(\".muted-link.mr-3\").eq(0).text().trim(), fork: li.find(\".muted-link.mr-3\").eq(1).text().trim(), forkedFrom: li.find(\".f6.text-gray.mb-1 a\").text().trim() } repos.push(repo) } console.log(repos)}) 命令行运行： 1node test.js *** 来源：https://zhuanlan.zhihu.com/p/53763115","link":"/2021/01/23/%E3%80%90node-js%E3%80%91%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB/"},{"title":"【全套教程】如何用github+hex搭建个人博客？","text":"第一安装配置 配置直接看这个博客，很直观详细：https://godweiyang.com/2018/04/13/hexo-blog/ 如果Git配置ssh-key后仍然需要输入密码，如何解决？ 这是https的事。 解决方法1：用ssh方式克隆仓库。比如： 1git clone git@github.com:Name/project.git 解决方法2：如果你已经clone了， 将项目下面的.git/config文件中的url地址改成ssh方式即可。如下： img img _config.yml配置文件也要一并修改，否则部署的时候仍然需要输入密码。如下： img 参考：https://blog.csdn.net/baidu_35085676/article/details/53456884 发布文章： 123hexo new post \"hello world\" hexo g hexo d 延迟大概是半分钟。等待半分钟就会更新到你的博客上啦。 注意：发布完后一定要git保存下hexo，因为文章最终还是保存在hexo下的。写个脚本即可，如下： 12345hexo clean hexo g hexo d git add -A git commit -m \"$1\" git push origin hexo 脚本运行： 1bash ./save.sh \"你的commit内容\" 保存后端hexo（前端不用管，hexo自动部署到github）： img 用git保存所有，则只保存上述红框框内的文件。我们也只需要保存这几个就可以了。 如何修改hexo的配置？ 1、进度hexo后端文件夹。 2、修改对应的配置文件。 3、git直接上传保存。 如果换了一台电脑怎么办？ 1、从git上下载hexo后端。 2、安装hexo组件： 12npm i hexo-cli -g npm install 用hexo -v查看下是否成功。 开发工具vscode配置： 1、首先得安装git，并记下git的安装地址，下面要用。 2、按Ctrl+Shift+P，然后跟着下图去做： img 在settings.json中添加下面指令（如下图）： 1\"terminal.integrated.shell.windows\": \"D:\\\\Program Files\\\\Git\\\\bin\\\\sh.exe\", img 最终效果图如下。你还能输入cmd或bash变来变去，很强大。 img 还有各种各样shell相关的辅助插件，详细见博文：https://www.cnblogs.com/Sweettesting/p/13827376.html 如果git add出现 \"fatal: in unpopulated submodule XXX\" 错误怎么办？ 看这里：https://blog.csdn.net/qq_36337754/article/details/105425528","link":"/2021/01/22/%E3%80%90%E5%85%A8%E5%A5%97%E6%95%99%E7%A8%8B%E3%80%91%E5%A6%82%E4%BD%95%E7%94%A8github-hex%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F/"},{"title":"我的专属纯色壁纸","text":"我的专属纯色壁纸","link":"/2021/01/24/%E6%88%91%E7%9A%84%E4%B8%93%E5%B1%9E%E7%BA%AF%E8%89%B2%E5%A3%81%E7%BA%B8/"},{"title":"一个shell脚本调用另一个shell脚本","text":"三种调用方式，详细看：https://www.cnblogs.com/houyongchong/p/7904290.html","link":"/2021/01/24/%E4%B8%80%E4%B8%AAshell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AAshell%E8%84%9A%E6%9C%AC/"},{"title":"搜索引擎高级搜索","text":"前言： 通过多次在谷歌和百度上使用高级搜索，发现，百度与谷歌在收录词条和查询精度上均有较大差距，故推荐在谷歌上使用高级搜索以提高效率。 常用的高级搜索指令： site，filetype，逻辑与或、逻辑非、双引号、通配符*、intitle、allintitle、inurl、allinurl、intext、allintext 更详细： 更详细的高级搜索看下面这篇博文，包括搜索引擎高级搜索和本地搜索，整理得非常直观非常好： https://cloud.tencent.com/developer/article/1464793","link":"/2021/01/12/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2/"},{"title":"测试页面","text":"test.sql 这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。这里是引用区域。 img 这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。这是一个测试页面。 文章，男，满族，1984年6月26日出生于陕西省西安市，中国内地男演员、导演，毕业于中央戏剧学院表演系。 2004年，参演电视剧《与青春有关的日子》，开始在影视圈崭露头角 [1] 。2005年，拍摄古装剧《锦衣卫》。2007年，主演赵宝刚导演的青春剧《奋斗》； [2] 同年，主演首部电影《走着瞧》。2008年，主演滕华涛执导的电视剧《蜗居》，饰演80后城市青年小贝。 [1] 2009年，在电影《海洋天堂》中扮演自闭症患者王大福；同年参演抗战剧《雪豹》 [3] 。2011年，主演的电视剧《裸婚时代》播出； [4] 同年，连续2年获得北京大学生电影节 [5-6] 最受大学生欢迎男演员奖。2012年，凭借电影《失恋33天》获得第31届大众电影百花奖最佳男主角奖 [7] ；同年，成立北京君竹影视文化有限公司，并导演第一部影视作品《小爸爸》。 2013年2月，主演的电影《西游·降魔篇》在全国上映 [8] 。2014年3月28日，主演的文艺爱情片《我在路上最爱你》在全国上映。2014年12月18日，在姜文执导的动作喜剧片《一步之遥》中扮演武七一角。2016年，主演电视剧《少帅》 [9] 和《剃刀边缘》 [10] 。2017年9月16日，凭借导演的电影《陆垚知马俐》获得第31届中国电影金鸡奖导演处女作奖 [11-12] 。2018年9月30日，主演的喜剧动作电影《胖子行动队》上映。 [13] 2004年，参演电视剧《与青春有关的日子》，开始在影视圈崭露头角 [1] 。2005年，拍摄古装剧《锦衣卫》。2007年，主演赵宝刚导演的青春剧《奋斗》； [2] 同年，主演首部电影《走着瞧》。2008年，主演滕华涛执导的电视剧《蜗居》，饰演80后城市青年小贝。 [1] 2009年，在电影《海洋天堂》中扮演自闭症患者王大福；同年参演抗战剧《雪豹》 [3] 。2011年，主演的电视剧《裸婚时代》播出； [4] 同年，连续2年获得北京大学生电影节 [5-6] 最受大学生欢迎男演员奖。2012年，凭借电影《失恋33天》获得第31届大众电影百花奖最佳男主角奖 [7] ；同年，成立北京君竹影视文化有限公司，并导演第一部影视作品《小爸爸》。 2013年2月，主演的电影《西游·降魔篇》在全国上映 [8] 。2014年3月28日，主演的文艺爱情片《我在路上最爱你》在全国上映。2014年12月18日，在姜文执导的动作喜剧片《一步之遥》中扮演武七一角。2016年，主演电视剧《少帅》 [9] 和《剃刀边缘》 [10] 。2017年9月16日，凭借导演的电影《陆垚知马俐》获得第31届中国电影金鸡奖导演处女作奖 [11-12] 。2018年9月30日，主演的喜剧动作电影《胖子行动队》上映。 [13] 1234567public static void main(String args[]){}&lt;!-- Trigger --&gt;&lt;button class=\"btn\" data-clipboard-text=\"Just because you can doesn't mean you should — clipboard.js\"&gt; Copy to clipboard&lt;/button&gt; 2004年，参演电视剧《与青春有关的日子》，开始在影视圈崭露头角 [1] 。2005年，拍摄古装剧《锦衣卫》。2007年，主演赵宝刚导演的青春剧《奋斗》； [2] 同年，主演首部电影《走着瞧》。2008年，主演滕华涛执导的电视剧《蜗居》，饰演80后城市青年小贝。 [1] 2009年，在电影《海洋天堂》中扮演自闭症患者王大福；同年参演抗战剧《雪豹》 [3] 。2011年，主演的电视剧《裸婚时代》播出； [4] 同年，连续2年获得北京大学生电影节 [5-6] 最受大学生欢迎男演员奖。2012年，凭借电影《失恋33天》获得第31届大众电影百花奖最佳男主角奖 [7] ；同年，成立北京君竹影视文化有限公司，并导演第一部影视作品《小爸爸》。 2013年2月，主演的电影《西游·降魔篇》在全国上映 [8] 。2014年3月28日，主演的文艺爱情片《我在路上最爱你》在全国上映。2014年12月18日，在姜文执导的动作喜剧片《一步之遥》中扮演武七一角。2016年，主演电视剧《少帅》 [9] 和《剃刀边缘》 [10] 。2017年9月16日，凭借导演的电影《陆垚知马俐》获得第31届中国电影金鸡奖导演处女作奖 [11-12] 。2018年9月30日，主演的喜剧动作电影《胖子行动队》上映。 [13]","link":"/2021/01/22/%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/"},{"title":"用python的cv2绘制任务格壁纸","text":"参考：https://www.zhihu.com/search?type=content&amp;q=%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D中的“少数派”的图。 img 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import cv2import numpy as npimport win32api, win32con, win32guiimport osdef set_win_background(image_name): key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER, \"Control Panel\\\\Desktop\", 0, win32con.KEY_SET_VALUE) win32api.RegSetValueEx(key, \"WallpaperStyle\", 0, win32con.REG_SZ, \"2\") # 2拉伸适应桌面,0桌面居中 win32api.RegSetValueEx(key, \"TileWallpaper\", 0, win32con.REG_SZ, \"0\") win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER, os.path.join(os.getcwd(),image_name), 1 + 2)def fill_rect(img_arr, start_point, height, width, bgr_color): cv2.rectangle(img_arr, start_point, (start_point[0]+int(width), start_point[1]+int(height)), bgr_color, -1)def draw(image_name): win_width = win32api.GetSystemMetrics(win32con.SM_CXSCREEN) # 1920 win_height = win32api.GetSystemMetrics(win32con.SM_CYSCREEN) # 1080 half_win_width = int(win_width/2) half_win_height = int(win_height/2) # 创建空白图像 image = np.ones((win_height, win_width, 3))*255 # 手动调参 top_div_line_offset = 28 left_div_line_offset =65 right_div_line_offset = 65 bottom_div_line_offset = 65 # 画四个矩阵 # top_left start_point = (0,0) fill_rect(image, start_point=start_point, height=half_win_height+left_div_line_offset, width=half_win_width+top_div_line_offset, bgr_color=(68,194,129)) # 颜色是BGR，不是RGB image = cv2.putText(image, \"work-1\", (start_point[0] + 30, start_point[1] + 50), cv2.FONT_HERSHEY_COMPLEX, 1.2, (0, 0, 0), 4) # 图像，文字内容， 坐标 ，字体，大小，颜色，字体厚度 # top_right start_point=(half_win_width+top_div_line_offset,0) fill_rect(image, start_point=start_point, height=half_win_height+right_div_line_offset, width=half_win_width-top_div_line_offset, bgr_color=(1,205,252)) # 颜色是BGR，不是RGB image = cv2.putText(image, \"work-2\", (start_point[0]+30, start_point[1]+50), cv2.FONT_HERSHEY_COMPLEX, 1.2, (0, 0, 0),4) # 图像，文字内容， 坐标 ，字体，大小，颜色，字体厚度 # bottom_left start_point=(0,half_win_height+left_div_line_offset) fill_rect(image, start_point=start_point, height=half_win_height-left_div_line_offset, width=half_win_width+bottom_div_line_offset, bgr_color=(92,80,234)) # 颜色是BGR，不是RGB image = cv2.putText(image, \"work-3\", (start_point[0]+30, start_point[1]+50), cv2.FONT_HERSHEY_COMPLEX, 1.2, (0, 0, 0),4) # 图像，文字内容， 坐标 ，字体，大小，颜色，字体厚度 # bottom_right start_point=(half_win_width+bottom_div_line_offset, half_win_height+right_div_line_offset) fill_rect(image, start_point=start_point, height=half_win_height-right_div_line_offset, width=half_win_width-bottom_div_line_offset, bgr_color=(238,186,20)) # 颜色是BGR，不是RGB image = cv2.putText(image, \"work-4\", (start_point[0]+30, start_point[1]+50), cv2.FONT_HERSHEY_COMPLEX, 1.2, (0, 0, 0),4) # 图像，文字内容， 坐标 ，字体，大小，颜色，字体厚度 cv2.imwrite(image_name, image)image_name = 'background.png'draw(image_name)set_win_background(image_name)","link":"/2021/01/24/%E7%94%A8python%E7%9A%84cv2%E7%BB%98%E5%88%B6%E4%BB%BB%E5%8A%A1%E6%A0%BC%E5%A3%81%E7%BA%B8/"}],"tags":[{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"c语言","slug":"c语言","link":"/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"位域","slug":"位域","link":"/tags/%E4%BD%8D%E5%9F%9F/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"指令","slug":"指令","link":"/tags/%E6%8C%87%E4%BB%A4/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"pdf","slug":"pdf","link":"/tags/pdf/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"valine","slug":"valine","link":"/tags/valine/"},{"name":"留言板","slug":"留言板","link":"/tags/%E7%95%99%E8%A8%80%E6%9D%BF/"},{"name":"站内搜索","slug":"站内搜索","link":"/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"壁纸","slug":"壁纸","link":"/tags/%E5%A3%81%E7%BA%B8/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"脚本","slug":"脚本","link":"/tags/%E8%84%9A%E6%9C%AC/"},{"name":"搜索技巧","slug":"搜索技巧","link":"/tags/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"},{"name":"检索","slug":"检索","link":"/tags/%E6%A3%80%E7%B4%A2/"},{"name":"test","slug":"test","link":"/tags/test/"}],"categories":[]}